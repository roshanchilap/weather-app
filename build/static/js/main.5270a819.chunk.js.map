{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","useEffect","search","a","fetch","process","then","res","json","result","console","log","catch","error","alert","require","config","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAEMA,EACE,2CAqGOC,MAlGf,WAAgB,IAAD,EACaC,mBAAS,UADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAKbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAM,uCAAG,sBAAAC,EAAA,sEACPC,MAAM,GAAD,OAAIV,EAAJ,qBAAyBG,EAAzB,+BAPDQ,qCAQPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLT,EAAWS,GACXX,EAAS,IACTY,QAAQC,IAAIF,MAEbG,OAAM,SAACC,GAAD,OAAWC,MAAMD,MARb,2CAAH,qDA4CZ,OAjCAE,EAAQ,IAAUC,SAkChB,qBACEC,UACyB,oBAAhBlB,EAAQmB,MACXnB,EAAQmB,KAAKC,KAAO,GAClB,MAEF,WANR,SASE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,0BACZC,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOC,QACnCA,MAAO5B,EACP6B,WAAYxB,MAMQ,oBAAhBH,EAAQmB,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGlB,EAAQ4B,KADX,KACmB5B,EAAQ6B,IAAIC,WAE/B,qBAAKZ,UAAU,OAAf,SA9DQ,SAACa,GACnB,IAuBIC,EATO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAEaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAiCDE,CAAY,IAAIC,WAEzC,sBAAKvB,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBwB,KAAKC,MAAM3C,EAAQmB,KAAKC,MAA/C,WACA,qBAAKF,UAAU,UAAf,SAA0BlB,EAAQA,QAAQ,GAAGmB,aAIjD,SCrFKyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5270a819.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst api = {\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"Mumbai\");\n  const [weather, setWeather] = useState({});\n  const key = process.env.REACT_APP_API_KEY;\n\n  useEffect(() => {\n    search();\n  }, []);\n\n  const search = async () => {\n    await fetch(`${api.base}weather?q=${query}&units=metric&APPID=${key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n        setQuery(\"\");\n        console.log(result);\n      })\n      .catch((error) => alert(error));\n  };\n\n  require(\"dotenv\").config();\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp < 16\n            ? \"app\"\n            : \"app warm\"\n          : \"app warm\"\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Weather in your city...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          ></input>\n          {/* <button className=\"searchButton\" type=\"submit\">\n            Search\n          </button> */}\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}&deg;c</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
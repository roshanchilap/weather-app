{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","weather","setWeather","search","setSearch","query","setQuery","useEffect","searchResult","a","fetch","process","res","json","data","console","log","require","config","className","main","temp","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAEMA,EACE,2CA+GOC,MA5Gf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,UAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAObC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAUMG,EAAY,uCAAG,8BAAAC,EAAA,sEACDC,MAAM,GAAD,OAClBZ,EADkB,qBACGO,EADH,+BAjBbM,qCAgBS,cACbC,EADa,gBAIAA,EAAIC,OAJJ,OAIbC,EAJa,OAKnBZ,EAAWY,GACXC,QAAQC,IAAIF,GANO,2CAAH,qDAyClB,OAjCAG,EAAQ,IAAUC,SAkChB,qBACEC,UACyB,oBAAhBlB,EAAQmB,MACXnB,EAAQmB,KAAKC,KAAO,GAClB,WAEF,MANR,SASE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAMG,SA/DI,SAACC,GACjBA,EAAEC,iBACFlB,EAASH,GACTC,EAAU,KA4DuBe,UAAU,cAArC,UACE,uBACEM,KAAK,OACLN,UAAU,aACVO,YAAY,0BACZC,MAAOxB,EACPyB,SA/DS,SAACL,GACpBnB,EAAUmB,EAAEM,OAAOF,UAgEX,wBAAQR,UAAU,eAAeM,KAAK,SAAtC,yBAKoB,oBAAhBxB,EAAQmB,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGlB,EAAQ6B,KADX,KACmB7B,EAAQ8B,IAAIC,WAE/B,qBAAKb,UAAU,OAAf,SA/DQ,SAACc,GACnB,IAuBIC,EATO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAEaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAkCDE,CAAY,IAAIC,WAEzC,sBAAKxB,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuByB,KAAKC,MAAM5C,EAAQmB,KAAKC,MAA/C,WACA,qBAAKF,UAAU,UAAf,SAA0BlB,EAAQA,QAAQ,GAAGmB,aAIjD,SC/FK0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1ac830e1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst api = {\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [weather, setWeather] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"Mumbai\");\n\n  const key = process.env.REACT_APP_API_KEY;\n\n  useEffect(() => {\n    searchResult();\n  }, [query]);\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const searchResult = async () => {\n    const res = await fetch(\n      `${api.base}weather?q=${query}&units=metric&APPID=${key}`\n    );\n    const data = await res.json();\n    setWeather(data);\n    console.log(data);\n  };\n  require(\"dotenv\").config();\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 16\n            ? \"app warm\"\n            : \"app\"\n          : \"app\"\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <form onSubmit={getSearch} className=\"search-form\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Weather in your city...\"\n              value={search}\n              onChange={updateSearch}\n            ></input>\n            <button className=\"searchButton\" type=\"submit\">\n              Search\n            </button>\n          </form>\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}&deg;c</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}